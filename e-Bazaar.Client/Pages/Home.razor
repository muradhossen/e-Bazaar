@page "/"
@inject HttpClient Http
@inject IProductService _productService
@inject IJSRuntime JS

@using Microsoft.AspNetCore.Components
@using System.Text.Json
@using e_Bazaar.Client.Common
@using e_Bazaar.Client.Pages.Carts
@using e_Bazaar.Client.Pages.Products
@using e_Bazaar.Client.Services
@using e_Bazaar.Client.ViewModels


<Offcanvas @ref="offcanvas"
           title="Shoping Cart">

    <BodyTemplate>
        @foreach (var item in cart.Items)
        {
            <CartProduct Container="@item"></CartProduct>
        }
    </BodyTemplate>

    <FooterTemplate>
        <div class="d-flex justify-content-between align-items-center w-100 px-2">
            <div style="color:#777777">Sub total </div>
            <div>@cart.TotalPrice.ToString("F2")</div>
        </div>
    </FooterTemplate>

</Offcanvas>

<div class="container-fluid p-4">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex align-items-center">
            <div class="bg-primary rounded-circle d-flex align-items-center justify-content-center me-2" style="width: 40px; height: 40px;">
                <i class="bi bi-shop text-white"></i>
            </div>
            <h3 class="mb-0 text-primary fw-bold">E-Bazaar</h3>
        </div>
        <div class="d-flex align-items-center" style="border: 1px solid #E5E9EB; padding: 7px;border-radius: 5px; cursor:pointer">
            <a @onclick="OnShowOffcanvasClick">
                <i class="bi bi-cart3 text-primary me-2"></i>
                <span class="badge bg-danger">@cart.TotalItems</span>
                <span class="ms-2">Cart (@cart.TotalItems)</span>
            </a>
        </div>
    </div>

    <!-- Dashboard Cards -->
    <div class="row mb-4">
        <div class="col-md-4 mb-3">
            <div class="dashboard-card bg-primary text-white h-100">
                <div class="card-body p-4">
                    <div class="d-flex align-items-start mb-4">
                        <div class="dashboard-icon me-3">
                            <i class="bi bi-house-door"></i>
                        </div>
                    </div>
                    <div>
                        <h3 class="card-title mb-3 fw-normal">Total Product : @TotalProducts</h3>
                        <p class="card-text mb-0" style="font-size: 16px; line-height: 1.5;">
                            Warehouse has total of @TotalProducts product today & the max capacity is @MaxCapacity.
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4 mb-3">
            <div class="dashboard-card bg-primary text-white h-100">
                <div class="card-body p-4">
                    <div class="d-flex align-items-start mb-4">
                        <div class="dashboard-icon me-3">
                            <i class="bi bi-people"></i>
                        </div>
                    </div>
                    <div>
                        <h3 class="card-title mb-3 fw-normal">Total Vendor: @TotalVendors.ToString("D2")</h3>
                        <p class="card-text mb-0" style="font-size: 16px; line-height: 1.5;">
                            A total of @TotalVendors out of @MaxVendors vendor are available for supply now.
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4 mb-3">
            <div class="dashboard-card bg-primary text-white h-100">
                <div class="card-body p-4">
                    <div class="d-flex align-items-start mb-4">
                        <div class="dashboard-icon me-3">
                            <i class="bi bi-box"></i>
                        </div>
                    </div>
                    <div>
                        <h3 class="card-title mb-3 fw-normal">Unique Product : @UniqueProducts</h3>
                        <p class="card-text mb-0" style="font-size: 16px; line-height: 1.5;">
                            Total number of products that are not duplicate or redundant.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Search and Add Product Section -->
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search here..." @bind="SearchQuery" @onkeypress="HandleKeyPress">
                <button class="btn btn-outline-primary" type="button" @onclick="LoadProduct">
                    <i class="bi bi-search"></i>
                </button>
            </div>
        </div>
        <div class="col-md-4">
            <button class="btn btn-outline-primary w-100" @onclick="AddProduct">
                <i class="bi bi-plus-circle me-2"></i>Add Product
            </button>
        </div>
    </div>

    <!-- Results Summary -->
    <div class="mb-3">
        <p class="text-muted">Showing @StartIndex–@EndIndex of @TotalResults results</p>
    </div>

    <!-- Product Grid -->
    <div class="row">
        @foreach (var product in Products)
        { 
            <ProductCard Product="@product"
                         DecreaseQuantity="DecreaseQuantity"
                         AddToCart="AddToCart"></ProductCard>


        }
    </div>

    <!-- Pagination -->
    <div class="d-flex justify-content-between align-items-center mt-4">
        <div class="d-flex align-items-center">
            <button class="btn btn-link text-decoration-none p-0 me-3 @(CurrentPage == 1 ? "disabled" : "")"
                    @onclick="PreviousPage" disabled="@(CurrentPage == 1)">
                <i class="bi bi-chevron-left me-1"></i>Prev
            </button>

            <nav aria-label="Page navigation">
                <ul class="pagination mb-0">
                    @{
                        var pagesToShow = GetPagesToShow();
                    }
                    @foreach (var pageInfo in pagesToShow)
                    {
                        @if (pageInfo.IsEllipsis)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                        else
                        {
                            <li class="page-item @(pageInfo.PageNumber == CurrentPage ? "active" : "")">
                                @if (pageInfo.PageNumber == CurrentPage)
                                {
                                    <span class="page-link bg-primary border-primary text-white">@pageInfo.PageNumber</span>
                                }
                                else
                                {
                                    <button type="button" class="page-link" @onclick="() => GoToPage(pageInfo.PageNumber)">@pageInfo.PageNumber</button>
                                }
                            </li>
                        }
                    }
                </ul>
            </nav>

            <button class="btn btn-link text-decoration-none p-0 ms-3 @(CurrentPage == TotalPages ? "disabled" : "")"
                    @onclick="NextPage" disabled="@(CurrentPage == TotalPages)">
                Next <i class="bi bi-chevron-right ms-1"></i>
            </button>
        </div>

        <div class="dropdown">
            <button class="btn btn-outline-secondary dropdown-toggle" type="button"
                    id="itemsPerPageDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                @ItemsPerPage per page
            </button>
            <ul class="dropdown-menu" aria-labelledby="itemsPerPageDropdown">
                <li><button type="button" class="dropdown-item @(ItemsPerPage == 10 ? "active" : "")" @onclick="() => ChangeItemsPerPage(10)">10 per page</button></li>
                <li><button type="button" class="dropdown-item @(ItemsPerPage == 20 ? "active" : "")" @onclick="() => ChangeItemsPerPage(20)">20 per page</button></li>
                <li><button type="button" class="dropdown-item @(ItemsPerPage == 50 ? "active" : "")" @onclick="() => ChangeItemsPerPage(50)">50 per page</button></li>
            </ul>
        </div>
    </div>
</div>



<!-- Product Create Modal -->
<ProductCreateModal IsVisible="showModal"
                    IsVisibleChanged="OnModalVisibilityChanged"
                    OnProductCreated="OnProductCreated" />

<style>
    .dashboard-card {
        border-radius: 20px !important;
        border: none;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        background: linear-gradient(135deg, #4285f4 0%, #3b78e7 100%);
    }

    .dashboard-icon {
        width: 50px;
        height: 50px;
        background-color: rgba(255, 255, 255, 0.2);
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
    }

    .product-card {
        transition: transform 0.2s ease-in-out;
        border: 1px solid #e0e0e0;
    }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

    .bg-primary {
        background-color: #4285f4 !important;
    }

    .text-primary {
        color: #4285f4 !important;
    }

    .btn-primary {
        background-color: #4285f4;
        border-color: #4285f4;
    }

    .btn-outline-secondary {
        color: #6c757d;
        border-color: #6c757d;
    }

        .btn-outline-secondary:hover {
            background-color: #6c757d;
            border-color: #6c757d;
            color: white;
        }

    .pagination .page-link {
        color: #6c757d;
        border-color: #dee2e6;
    }

    .pagination .page-item.active .page-link {
        background-color: #4285f4;
        border-color: #4285f4;
        color: white;
    }

    .pagination .page-link:hover {
        color: #4285f4;
        background-color: #e7f1ff;
        border-color: #dee2e6;
    }

    .dropdown-item.active {
        background-color: #4285f4;
        color: white;
    }

    .btn-link.disabled {
        color: #6c757d;
        pointer-events: none;
    }
</style>

@code {
    // Dashboard Properties
    private int TotalProducts = 100;
    private int MaxCapacity = 200;
    private int TotalVendors = 6;
    private int MaxVendors = 10;
    private int UniqueProducts = 40;
    private int CartItemCount = 4;

    // Search and Pagination
    private string SearchQuery = "";
    private int TotalResults = 0;
    private int StartIndex = 0;
    private int EndIndex = 0;
    private int CurrentPage = 1;
    private int TotalPages = 0;
    private int ItemsPerPage = 2;

    // Product quantities for cart functionality
    private Dictionary<int, int> ProductQuantities = new Dictionary<int, int>();

    // Product List
    private List<Product> Products = new();

    private Offcanvas offcanvas = default!;


    private Cart cart = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProduct();
    }

    private async Task LoadProduct()
    {
        var requestUri = $"api/products?pageNumber={CurrentPage}&pageSize={ItemsPerPage}&searchKey={SearchQuery}";
        var response = await Http.GetAsync(requestUri);

        if (response.IsSuccessStatusCode)
        {
            // Deserialize the response body
            var responseStream = await response.Content.ReadAsStreamAsync();
            var pagedProducts = await JsonSerializer.DeserializeAsync<PagedList<Product>>(
                responseStream,
                new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            Products = pagedProducts ?? new List<Product>();

            // Get the Pagination header
            if (response.Headers.TryGetValues("Pagination", out var paginationHeaderValues))
            {
                var paginationHeader = paginationHeaderValues.First();
                var pagination = JsonSerializer.Deserialize<PaginationHeader>(paginationHeader, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                TotalResults = pagination.TotalItems;
                CurrentPage = pagination.CurrentPage;
                TotalPages = pagination.TotalPages;

            }
        }
        else
        {
            Products = new List<Product>();
            Console.WriteLine($"Error: {response.StatusCode}");
        }
    }



    public class PageInfo
    {
        public int PageNumber { get; set; }
        public bool IsEllipsis { get; set; }
    }

    private async Task OpenOffcanvas()
    {
        await JS.InvokeVoidAsync("eval", "new bootstrap.Offcanvas(document.getElementById('manualCanvas')).show()");
    }

    private async void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadProduct();
        }
    }

    private void AddProduct()
    {
        ShowModal();
        Console.WriteLine("Add Product clicked");
    }

    private void AddToCart(Product product)
    {
        cart.AddToCart(product);
    }

    // Quantity Management
    private int GetProductQuantity(int productId)
    {
        return ProductQuantities.ContainsKey(productId) ? ProductQuantities[productId] : 1;
    }

    private void IncreaseQuantity(Product product)
    {
        if (ProductQuantities.ContainsKey(product.Id))
        {
            ProductQuantities[product.Id]++;
        }
        else
        {
            ProductQuantities[product.Id] = 2;
        }
    }

    private void DecreaseQuantity(Product product)
    {
        cart.RemoveFromCart(product);
    }

    // Pagination Methods
    private async Task PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            UpdatePagination();
            await LoadProduct();
            StateHasChanged();
        }
    }

    private async Task NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            await LoadProduct();
            UpdatePagination();
            StateHasChanged();
        }
    }

    private async void GoToPage(int page)
    {
        if (page != CurrentPage && page >= 1 && page <= TotalPages)
        {
            CurrentPage = page;
            UpdatePagination();
            await LoadProduct();
            StateHasChanged();
        }
    }

    private void ChangeItemsPerPage(int itemsPerPage)
    {
        ItemsPerPage = itemsPerPage;
        CurrentPage = 1;
        TotalPages = (int)Math.Ceiling((double)TotalResults / ItemsPerPage);
        UpdatePagination();
        StateHasChanged();
    }

    private void UpdatePagination()
    {
        StartIndex = (CurrentPage - 1) * ItemsPerPage + 1;
        EndIndex = Math.Min(CurrentPage * ItemsPerPage, TotalResults);
    }

    private List<PageInfo> GetPagesToShow()
    {
        var pages = new List<PageInfo>();

        // Always show first page
        pages.Add(new PageInfo { PageNumber = 1, IsEllipsis = false });

        if (TotalPages <= 10)
        {
            // Show all pages if total is 10 or less
            for (int i = 2; i <= TotalPages; i++)
            {
                pages.Add(new PageInfo { PageNumber = i, IsEllipsis = false });
            }
        }
        else
        {
            // Show pages around current page
            int start = Math.Max(2, CurrentPage - 2);
            int end = Math.Min(TotalPages - 1, CurrentPage + 2);

            // Add ellipsis before if needed
            if (start > 2)
            {
                pages.Add(new PageInfo { IsEllipsis = true });
            }

            // Add pages around current
            for (int i = start; i <= end; i++)
            {
                pages.Add(new PageInfo { PageNumber = i, IsEllipsis = false });
            }

            // Add ellipsis after if needed
            if (end < TotalPages - 1)
            {
                pages.Add(new PageInfo { IsEllipsis = true });
            }

            // Always show last page
            if (TotalPages > 1)
            {
                pages.Add(new PageInfo { PageNumber = TotalPages, IsEllipsis = false });
            }
        }

        return pages;
    }


    //Modal
    private bool showModal = false;


    private void ShowModal()
    {
        showModal = true;
    }

    private void OnModalVisibilityChanged(bool isVisible)
    {
        showModal = isVisible;
    }

    private void OnProductCreated(ProductModel product)
    {
        var productToAdd = new ProductModel
            {
                Name = product.Name,
                Slug = product.Slug,
                Price = product.Price,
                DiscountStart = product.DiscountStart,
                DiscountEnd = product.DiscountEnd,
                Percentage = 25
            };

        try
        {
            _productService.CreateProductAsync(productToAdd);
        }
        catch (HttpRequestException ex)
        {

        }
        catch (Exception ex)
        {
            // ShowAlert("An unexpected error occurred. Please try again.", "danger", "fa-exclamation-triangle");
        }
        finally
        {

        }

        StateHasChanged();
    }

    private async Task OnShowOffcanvasClick() => await offcanvas.ShowAsync();
    private async Task OnHideOffcanvasClick() => await offcanvas.HideAsync();

}