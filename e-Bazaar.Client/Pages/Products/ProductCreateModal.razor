@* ProductCreateModal.razor *@
@using Microsoft.AspNetCore.Components
@using e_Bazaar.Client.Common.Extensions
@using e_Bazaar.Client.ViewModels

<div class="modal fade @(IsVisible ? "show" : "")" 
     style="display: @(IsVisible ? "block" : "none")" 
     tabindex="-1" 
     role="dialog" 
     aria-labelledby="productModalLabel" 
     aria-hidden="@(!IsVisible)">
    
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="productModalLabel">
                    <i class="fas fa-plus-circle me-2"></i>Add New Product
                </h5>
                <button type="button" 
                        class="btn-close btn-close-white" 
                        aria-label="Close"
                        @onclick="CloseModal">
                </button>
            </div>
            
            <div class="modal-body">
                <p class="text-muted mb-4">Add description of your new product.</p>
                
                <EditForm Model="Product" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    
                    <div class="row g-3">
                        <!-- Product Name -->
                        <div class="col-12">
                            <label for="productName" class="form-label">Product Name</label>
                            <InputText id="productName" 
                                     class="form-control" 
                                     @bind-Value="Product.Name" 
                                     placeholder="Product name" />
                            <ValidationMessage For="@(() => Product.Name)" />
                        </div>

                        <!-- Slug and Price Row -->
                        <div class="col-md-6">
                            <label for="slug" class="form-label">Slug</label>
                            <div class="input-group">
                                <InputText id="slug" 
                                         class="form-control" 
                                         @bind-Value="Product.Slug" 
                                         placeholder="product-name" />
                                <button class="btn btn-primary" 
                                        type="button" 
                                        @onclick="GenerateSlug">
                                    Generate
                                </button>
                            </div>
                            <ValidationMessage For="@(() => Product.Slug)" />
                        </div>

                        <div class="col-md-6">
                            <label for="price" class="form-label">Price</label>
                            <div class="input-group"> 
                                <InputNumber id="price" 
                                           class="form-control" 
                                           @bind-Value="Product.Price" 
                                           placeholder="0.00" />
                            </div>
                            <ValidationMessage For="@(() => Product.Price)" />
                        </div>

                        <!-- Discount Dates Row -->
                        <div class="col-md-6">
                            <label for="discountStart" class="form-label">Discount Start</label>
                            <InputDate id="discountStart" 
                                     class="form-control" 
                                     @bind-Value="Product.DiscountStart" />
                            <ValidationMessage For="@(() => Product.DiscountStart)" />
                        </div>

                        <div class="col-md-6">
                            <label for="discountEnd" class="form-label">Discount End</label>
                            <InputDate id="discountEnd" 
                                     class="form-control" 
                                     @bind-Value="Product.DiscountEnd" />
                            <ValidationMessage For="@(() => Product.DiscountEnd)" />
                        </div>

                      
                    </div>
                    
                    <div class="modal-footer mt-4">
                        <button type="button" 
                                class="btn btn-secondary" 
                                @onclick="CloseModal">
                            Cancel
                        </button>
                        <button type="submit" 
                                class="btn btn-primary">
                            <i class="fas fa-save me-1"></i>Add Product
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@* Modal Backdrop *@
@if (IsVisible)
{
    <div class="modal-backdrop fade show" @onclick="CloseModal"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback<ProductModel> OnProductCreated { get; set; }

    private ProductModel Product = new();

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            // Reset form when modal opens
            Product = new ProductModel();
        }
    }

    private async Task CloseModal()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }

    private void GenerateSlug()
    {
        if (!string.IsNullOrWhiteSpace(Product.Name))
        {
            Product.Slug = Product.Name
                .ToLowerInvariant()
                .Replace(" ", "-")
                .Replace("&", "and")
                .RegexReplace(@"[^a-z0-9\-]", "")
                .RegexReplace(@"-+", "-")
                .Trim('-');
        }
    }

    private async Task HandleValidSubmit()
    {
        // Invoke the callback to parent component
        await OnProductCreated.InvokeAsync(Product);
        
        // Close the modal
        await CloseModal();
    }
}


<style>
    .modal.show {
        display: block !important;
    }
    
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1040;
        width: 100vw;
        height: 100vh;
        background-color: #000;
        opacity: 0.5;
    }
    
    .input-group .btn {
        border-radius: 0 0.375rem 0.375rem 0;
    }
</style>