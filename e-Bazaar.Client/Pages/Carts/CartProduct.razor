@* ShoppingCartOffCanvas.razor *@
@using Microsoft.AspNetCore.Components

<!-- Off-canvas Backdrop -->
@if (IsVisible)
{
    <div class="offcanvas-backdrop fade show" @onclick="CloseCart"></div>
}

<!-- Off-canvas Cart -->
<div class="offcanvas offcanvas-end @(IsVisible ? "show" : "")" 
     style="width: 800px; visibility: @(IsVisible ? "visible" : "hidden")" 
     tabindex="-1">
    
    <div class="offcanvas-header border-bottom">
        <h5 class="offcanvas-title fw-bold">
            <i class="fas fa-shopping-cart me-2"></i>Shopping Cart
        </h5>
        <button type="button" class="btn-close" @onclick="CloseCart"></button>
    </div>
    
    <div class="offcanvas-body p-0">
        <div class="row g-0 h-100">
            <!-- Product Grid Section -->
            <div class="col-8 bg-light border-end">
                <div class="p-3">
                    <!-- Stats Cards -->
                    <div class="row g-2 mb-4">
                        <div class="col-6">
                            <div class="card bg-primary text-white">
                                <div class="card-body p-3">
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-cube fa-2x me-3"></i>
                                        <div>
                                            <h6 class="mb-0">Total Products</h6>
                                            <h4 class="mb-0">@Products.Count</h4>
                                            <small>Available in store</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="card bg-info text-white">
                                <div class="card-body p-3">
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-warehouse fa-2x me-3"></i>
                                        <div>
                                            <h6 class="mb-0">Total in Stock</h6>
                                            <h4 class="mb-0">@Products.Sum(p => p.Stock)</h4>
                                            <small>Items available today</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Search and Filter -->
                    <div class="mb-3">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fas fa-search"></i>
                            </span>
                            <input type="text" class="form-control" 
                                   placeholder="Search products..." 
                                   @bind="searchTerm" 
                                   @oninput="FilterProducts" />
                        </div>
                    </div>

                    <p class="text-muted mb-3">Showing @FilteredProducts.Count of @Products.Count results</p>

                    <!-- Product Grid -->
                    <div class="row g-3" style="max-height: 400px; overflow-y: auto;">
                        @foreach (var product in FilteredProducts)
                        {
                            <div class="col-6">
                                <div class="card h-100 shadow-sm product-card">
                                    <div class="card-img-top bg-white d-flex align-items-center justify-content-center" 
                                         style="height: 120px;">
                                        <img src="@product.ImageUrl" 
                                             alt="@product.Name" 
                                             class="img-fluid" 
                                             style="max-height: 100px; max-width: 100px;" />
                                    </div>
                                    <div class="card-body p-2">
                                        <h6 class="card-title small mb-1">@product.Name</h6>
                                        <p class="text-primary fw-bold mb-2">$@product.Price.ToString("F2")</p>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <small class="text-muted">Stock: @product.Stock</small>
                                            <button class="btn btn-primary btn-sm" 
                                                    @onclick="() => AddToCart(product)"
                                                    disabled="@(product.Stock == 0)">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Cart Items Section -->
            <div class="col-4">
                <div class="p-3 h-100 d-flex flex-column">
                    <h6 class="fw-bold mb-3">Cart Items (@CartItems.Sum(c => c.Quantity))</h6>
                    
                    @if (CartItems.Any())
                    {
                        <div class="flex-grow-1" style="overflow-y: auto;">
                            @foreach (var item in CartItems)
                            {
                                <div class="card mb-2 border-0 bg-light">
                                    <div class="card-body p-2">
                                        <div class="d-flex align-items-center">
                                            <img src="@item.Product.ImageUrl" 
                                                 alt="@item.Product.Name" 
                                                 class="rounded me-2" 
                                                 style="width: 40px; height: 40px; object-fit: cover;" />
                                            <div class="flex-grow-1">
                                                <h6 class="mb-0 small">@item.Product.Name</h6>
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <span class="text-primary small">$@item.Product.Price.ToString("F2")</span>
                                                    <div class="btn-group btn-group-sm">
                                                        <button class="btn btn-outline-secondary" 
                                                                @onclick="() => DecreaseQuantity(item.Product.Id)">
                                                            <i class="fas fa-minus"></i>
                                                        </button>
                                                        <span class="btn btn-outline-secondary disabled">@item.Quantity</span>
                                                        <button class="btn btn-outline-secondary" 
                                                                @onclick="() => IncreaseQuantity(item.Product.Id)">
                                                            <i class="fas fa-plus"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                                <div class="text-end">
                                                    <small class="fw-bold">$@((item.Product.Price * item.Quantity).ToString("F2"))</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- Cart Summary -->
                        <div class="border-top pt-3 mt-3">
                            <div class="d-flex justify-content-between mb-2">
                                <span>Subtotal:</span>
                                <span class="fw-bold">$@SubTotal.ToString("F2")</span>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Tax (10%):</span>
                                <span>$@Tax.ToString("F2")</span>
                            </div>
                            <div class="d-flex justify-content-between mb-3 fs-5 fw-bold border-top pt-2">
                                <span>Total:</span>
                                <span class="text-primary">$@Total.ToString("F2")</span>
                            </div>
                            <button class="btn btn-primary w-100 mb-2" @onclick="Checkout">
                                <i class="fas fa-credit-card me-2"></i>Checkout
                            </button>
                            <button class="btn btn-outline-danger w-100" @onclick="ClearCart">
                                <i class="fas fa-trash me-2"></i>Clear Cart
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted flex-grow-1 d-flex flex-column justify-content-center">
                            <i class="fas fa-shopping-cart fa-3x mb-3 opacity-50"></i>
                            <p>Your cart is empty</p>
                            <small>Add products from the left panel</small>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .offcanvas {
        transition: transform 0.3s ease-in-out;
        transform: translateX(100%);
    }
    
    .offcanvas.show {
        transform: translateX(0);
    }
    
    .offcanvas-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1040;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
    }
    
    .product-card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    
    .product-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;
    }
    
    .btn-group .btn {
        min-width: 32px;
        padding: 0.25rem 0.5rem;
    }
    
 
</style>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public List<ProductItem> Products { get; set; } = new();
    [Parameter] public EventCallback<CartSummary> OnCheckout { get; set; }

    private List<CartItem> CartItems = new();
    private List<ProductItem> FilteredProducts = new();
    private string searchTerm = string.Empty;

    public decimal SubTotal => CartItems.Sum(item => item.Product.Price * item.Quantity);
    public decimal Tax => SubTotal * 0.10m;
    public decimal Total => SubTotal + Tax;

    protected override void OnParametersSet()
    {
        FilteredProducts = Products.ToList();
    }

    private async Task CloseCart()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }

    private void FilterProducts(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        FilteredProducts = string.IsNullOrWhiteSpace(searchTerm) 
            ? Products.ToList()
            : Products.Where(p => p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void AddToCart(ProductItem product)
    {
        if (product.Stock <= 0) return;

        var existingItem = CartItems.FirstOrDefault(c => c.Product.Id == product.Id);
        if (existingItem != null)
        {
            existingItem.Quantity++;
        }
        else
        {
            CartItems.Add(new CartItem { Product = product, Quantity = 1 });
        }

        // Decrease stock
        product.Stock--;
        StateHasChanged();
    }

    private void IncreaseQuantity(int productId)
    {
        var item = CartItems.FirstOrDefault(c => c.Product.Id == productId);
        var product = Products.FirstOrDefault(p => p.Id == productId);
        
        if (item != null && product != null && product.Stock > 0)
        {
            item.Quantity++;
            product.Stock--;
        }
    }

    private void DecreaseQuantity(int productId)
    {
        var item = CartItems.FirstOrDefault(c => c.Product.Id == productId);
        var product = Products.FirstOrDefault(p => p.Id == productId);
        
        if (item != null && product != null)
        {
            item.Quantity--;
            product.Stock++;
            
            if (item.Quantity <= 0)
            {
                CartItems.Remove(item);
            }
        }
    }

    private void ClearCart()
    {
        foreach (var item in CartItems)
        {
            var product = Products.FirstOrDefault(p => p.Id == item.Product.Id);
            if (product != null)
            {
                product.Stock += item.Quantity;
            }
        }
        CartItems.Clear();
    }

    private async Task Checkout()
    {
        var summary = new CartSummary
        {
            Items = CartItems.ToList(),
            SubTotal = SubTotal,
            Tax = Tax,
            Total = Total
        };

        await OnCheckout.InvokeAsync(summary);
        ClearCart();
        await CloseCart();
    }

    // Models for the cart component
public class ProductItem
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public decimal Price { get; set; }
    public int Stock { get; set; }
    public string ImageUrl { get; set; } = "/images/placeholder.png";
}

public class CartItem
{
    public ProductItem Product { get; set; } = new();
    public int Quantity { get; set; }
}

public class CartSummary
{
    public List<CartItem> Items { get; set; } = new();
    public decimal SubTotal { get; set; }
    public decimal Tax { get; set; }
    public decimal Total { get; set; }
}
}

